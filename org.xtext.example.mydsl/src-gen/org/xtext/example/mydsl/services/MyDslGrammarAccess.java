/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UnoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Uno");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGameIDTerminalRuleCall_2_0 = (RuleCall)cGameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Uno:
		//	'UNO' 'game' game=ID '{' rules+=Rule+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'UNO' 'game' game=ID '{' rules+=Rule+ '}'
		public Group getGroup() { return cGroup; }
		
		//'UNO'
		public Keyword getUNOKeyword_0() { return cUNOKeyword_0; }
		
		//'game'
		public Keyword getGameKeyword_1() { return cGameKeyword_1; }
		
		//game=ID
		public Assignment getGameAssignment_2() { return cGameAssignment_2; }
		
		//ID
		public RuleCall getGameIDTerminalRuleCall_2_0() { return cGameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0() { return cRulesRuleParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cOriginalParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVariantsVariantParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rule:
		//	'Rules' '{' (Original | variants+=Variant*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rules' '{' (Original | variants+=Variant*) '}'
		public Group getGroup() { return cGroup; }
		
		//'Rules'
		public Keyword getRulesKeyword_0() { return cRulesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(Original | variants+=Variant*)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Original
		public RuleCall getOriginalParserRuleCall_2_0() { return cOriginalParserRuleCall_2_0; }
		
		//variants+=Variant*
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }
		
		//Variant
		public RuleCall getVariantsVariantParserRuleCall_2_1_0() { return cVariantsVariantParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OriginalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Original");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRulesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPlayKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Original:
		//	'Original' 'rules.' 'Play' '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'Original' 'rules.' 'Play' '!'
		public Group getGroup() { return cGroup; }
		
		//'Original'
		public Keyword getOriginalKeyword_0() { return cOriginalKeyword_0; }
		
		//'rules.'
		public Keyword getRulesKeyword_1() { return cRulesKeyword_1; }
		
		//'Play'
		public Keyword getPlayKeyword_2() { return cPlayKeyword_2; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChallengeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCardsEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterceptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCumulatingMalusParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHandsDownParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWithoutMalusParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Variant:
		//	Challenge | CardsEffect | Interception | CumulatingMalus | HandsDown | WithoutMalus;
		@Override public ParserRule getRule() { return rule; }
		
		//Challenge | CardsEffect | Interception | CumulatingMalus | HandsDown | WithoutMalus
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Challenge
		public RuleCall getChallengeParserRuleCall_0() { return cChallengeParserRuleCall_0; }
		
		//CardsEffect
		public RuleCall getCardsEffectParserRuleCall_1() { return cCardsEffectParserRuleCall_1; }
		
		//Interception
		public RuleCall getInterceptionParserRuleCall_2() { return cInterceptionParserRuleCall_2; }
		
		//CumulatingMalus
		public RuleCall getCumulatingMalusParserRuleCall_3() { return cCumulatingMalusParserRuleCall_3; }
		
		//HandsDown
		public RuleCall getHandsDownParserRuleCall_4() { return cHandsDownParserRuleCall_4; }
		
		//WithoutMalus
		public RuleCall getWithoutMalusParserRuleCall_5() { return cWithoutMalusParserRuleCall_5; }
	}
	public class ChallengeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Challenge");
		private final Keyword cChallengeKeyword = (Keyword)rule.eContents().get(1);
		
		//Challenge:
		//	'Challenge.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Challenge.'
		public Keyword getChallengeKeyword() { return cChallengeKeyword; }
	}
	public class CardsEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CardsEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCardsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEffectsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCardKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cDigitZeroFullStopKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCardKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cDigitSevenFullStopKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cCardKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cDigitZeroKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Keyword cAndKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cCardKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Keyword cDigitSevenFullStopKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		
		//CardsEffect:
		//	'Cards' 'effects:'+ ('card' '0.' | 'card' '7.' | 'card' '0' 'and' 'card' '7.');
		@Override public ParserRule getRule() { return rule; }
		
		//'Cards' 'effects:'+ ('card' '0.' | 'card' '7.' | 'card' '0' 'and' 'card' '7.')
		public Group getGroup() { return cGroup; }
		
		//'Cards'
		public Keyword getCardsKeyword_0() { return cCardsKeyword_0; }
		
		//'effects:'+
		public Keyword getEffectsKeyword_1() { return cEffectsKeyword_1; }
		
		//('card' '0.' | 'card' '7.' | 'card' '0' 'and' 'card' '7.')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'card' '0.'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'card'
		public Keyword getCardKeyword_2_0_0() { return cCardKeyword_2_0_0; }
		
		//'0.'
		public Keyword getDigitZeroFullStopKeyword_2_0_1() { return cDigitZeroFullStopKeyword_2_0_1; }
		
		//'card' '7.'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'card'
		public Keyword getCardKeyword_2_1_0() { return cCardKeyword_2_1_0; }
		
		//'7.'
		public Keyword getDigitSevenFullStopKeyword_2_1_1() { return cDigitSevenFullStopKeyword_2_1_1; }
		
		//'card' '0' 'and' 'card' '7.'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'card'
		public Keyword getCardKeyword_2_2_0() { return cCardKeyword_2_2_0; }
		
		//'0'
		public Keyword getDigitZeroKeyword_2_2_1() { return cDigitZeroKeyword_2_2_1; }
		
		//'and'
		public Keyword getAndKeyword_2_2_2() { return cAndKeyword_2_2_2; }
		
		//'card'
		public Keyword getCardKeyword_2_2_3() { return cCardKeyword_2_2_3; }
		
		//'7.'
		public Keyword getDigitSevenFullStopKeyword_2_2_4() { return cDigitSevenFullStopKeyword_2_2_4; }
	}
	public class InterceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Interception");
		private final Keyword cInterceptionKeyword = (Keyword)rule.eContents().get(1);
		
		//Interception:
		//	'Interception.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Interception.'
		public Keyword getInterceptionKeyword() { return cInterceptionKeyword; }
	}
	public class CumulatingMalusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CumulatingMalus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCumulatingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMalusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cOnlyKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cPlusKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cDigitTwoFullStopKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cOnlyKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cPlusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cDigitFourFullStopKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cPlusKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cDigitTwoKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Keyword cAndKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cPlusKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Keyword cDigitFourFullStopKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		
		//CumulatingMalus:
		//	'Cumulating' 'malus:'+ ('Only' 'plus' '2.' | 'Only' 'plus' '4.' | 'plus' '2' 'and' 'plus' '4.');
		@Override public ParserRule getRule() { return rule; }
		
		//'Cumulating' 'malus:'+ ('Only' 'plus' '2.' | 'Only' 'plus' '4.' | 'plus' '2' 'and' 'plus' '4.')
		public Group getGroup() { return cGroup; }
		
		//'Cumulating'
		public Keyword getCumulatingKeyword_0() { return cCumulatingKeyword_0; }
		
		//'malus:'+
		public Keyword getMalusKeyword_1() { return cMalusKeyword_1; }
		
		//('Only' 'plus' '2.' | 'Only' 'plus' '4.' | 'plus' '2' 'and' 'plus' '4.')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Only' 'plus' '2.'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'Only'
		public Keyword getOnlyKeyword_2_0_0() { return cOnlyKeyword_2_0_0; }
		
		//'plus'
		public Keyword getPlusKeyword_2_0_1() { return cPlusKeyword_2_0_1; }
		
		//'2.'
		public Keyword getDigitTwoFullStopKeyword_2_0_2() { return cDigitTwoFullStopKeyword_2_0_2; }
		
		//'Only' 'plus' '4.'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'Only'
		public Keyword getOnlyKeyword_2_1_0() { return cOnlyKeyword_2_1_0; }
		
		//'plus'
		public Keyword getPlusKeyword_2_1_1() { return cPlusKeyword_2_1_1; }
		
		//'4.'
		public Keyword getDigitFourFullStopKeyword_2_1_2() { return cDigitFourFullStopKeyword_2_1_2; }
		
		//'plus' '2' 'and' 'plus' '4.'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'plus'
		public Keyword getPlusKeyword_2_2_0() { return cPlusKeyword_2_2_0; }
		
		//'2'
		public Keyword getDigitTwoKeyword_2_2_1() { return cDigitTwoKeyword_2_2_1; }
		
		//'and'
		public Keyword getAndKeyword_2_2_2() { return cAndKeyword_2_2_2; }
		
		//'plus'
		public Keyword getPlusKeyword_2_2_3() { return cPlusKeyword_2_2_3; }
		
		//'4.'
		public Keyword getDigitFourFullStopKeyword_2_2_4() { return cDigitFourFullStopKeyword_2_2_4; }
	}
	public class HandsDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HandsDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDownKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//HandsDown:
		//	'Hands' 'down.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Hands' 'down.'
		public Group getGroup() { return cGroup; }
		
		//'Hands'
		public Keyword getHandsKeyword_0() { return cHandsKeyword_0; }
		
		//'down.'
		public Keyword getDownKeyword_1() { return cDownKeyword_1; }
	}
	public class WithoutMalusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WithoutMalus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMalusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WithoutMalus:
		//	'Without' 'malus.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Without' 'malus.'
		public Group getGroup() { return cGroup; }
		
		//'Without'
		public Keyword getWithoutKeyword_0() { return cWithoutKeyword_0; }
		
		//'malus.'
		public Keyword getMalusKeyword_1() { return cMalusKeyword_1; }
	}
	
	
	private final UnoElements pUno;
	private final RuleElements pRule;
	private final OriginalElements pOriginal;
	private final VariantElements pVariant;
	private final ChallengeElements pChallenge;
	private final CardsEffectElements pCardsEffect;
	private final InterceptionElements pInterception;
	private final CumulatingMalusElements pCumulatingMalus;
	private final HandsDownElements pHandsDown;
	private final WithoutMalusElements pWithoutMalus;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUno = new UnoElements();
		this.pRule = new RuleElements();
		this.pOriginal = new OriginalElements();
		this.pVariant = new VariantElements();
		this.pChallenge = new ChallengeElements();
		this.pCardsEffect = new CardsEffectElements();
		this.pInterception = new InterceptionElements();
		this.pCumulatingMalus = new CumulatingMalusElements();
		this.pHandsDown = new HandsDownElements();
		this.pWithoutMalus = new WithoutMalusElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Uno:
	//	'UNO' 'game' game=ID '{' rules+=Rule+ '}';
	public UnoElements getUnoAccess() {
		return pUno;
	}
	
	public ParserRule getUnoRule() {
		return getUnoAccess().getRule();
	}
	
	//Rule:
	//	'Rules' '{' (Original | variants+=Variant*) '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Original:
	//	'Original' 'rules.' 'Play' '!';
	public OriginalElements getOriginalAccess() {
		return pOriginal;
	}
	
	public ParserRule getOriginalRule() {
		return getOriginalAccess().getRule();
	}
	
	//Variant:
	//	Challenge | CardsEffect | Interception | CumulatingMalus | HandsDown | WithoutMalus;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//Challenge:
	//	'Challenge.';
	public ChallengeElements getChallengeAccess() {
		return pChallenge;
	}
	
	public ParserRule getChallengeRule() {
		return getChallengeAccess().getRule();
	}
	
	//CardsEffect:
	//	'Cards' 'effects:'+ ('card' '0.' | 'card' '7.' | 'card' '0' 'and' 'card' '7.');
	public CardsEffectElements getCardsEffectAccess() {
		return pCardsEffect;
	}
	
	public ParserRule getCardsEffectRule() {
		return getCardsEffectAccess().getRule();
	}
	
	//Interception:
	//	'Interception.';
	public InterceptionElements getInterceptionAccess() {
		return pInterception;
	}
	
	public ParserRule getInterceptionRule() {
		return getInterceptionAccess().getRule();
	}
	
	//CumulatingMalus:
	//	'Cumulating' 'malus:'+ ('Only' 'plus' '2.' | 'Only' 'plus' '4.' | 'plus' '2' 'and' 'plus' '4.');
	public CumulatingMalusElements getCumulatingMalusAccess() {
		return pCumulatingMalus;
	}
	
	public ParserRule getCumulatingMalusRule() {
		return getCumulatingMalusAccess().getRule();
	}
	
	//HandsDown:
	//	'Hands' 'down.';
	public HandsDownElements getHandsDownAccess() {
		return pHandsDown;
	}
	
	public ParserRule getHandsDownRule() {
		return getHandsDownAccess().getRule();
	}
	
	//WithoutMalus:
	//	'Without' 'malus.';
	public WithoutMalusElements getWithoutMalusAccess() {
		return pWithoutMalus;
	}
	
	public ParserRule getWithoutMalusRule() {
		return getWithoutMalusAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
