/*
 * generated by Xtext 2.21.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Uno";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleUno
entryRuleUno returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnoRule()); }
	iv_ruleUno=ruleUno
	{ $current=$iv_ruleUno.current; }
	EOF;

// Rule Uno
ruleUno returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UNO'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnoAccess().getUNOKeyword_0());
		}
		otherlv_1='game'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnoAccess().getGameKeyword_1());
		}
		(
			(
				lv_game_2_0=RULE_ID
				{
					newLeafNode(lv_game_2_0, grammarAccess.getUnoAccess().getGameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnoRule());
					}
					setWithLastConsumed(
						$current,
						"game",
						lv_game_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnoAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnoAccess().getRulesRuleParserRuleCall_4_0());
				}
				lv_rules_4_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnoRule());
					}
					add(
						$current,
						"rules",
						lv_rules_4_0,
						"org.xtext.example.mydsl.MyDsl.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getUnoAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rules'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRulesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getRuleAccess().getOriginalParserRuleCall_2_0());
			}
			ruleOriginal
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getVariantsVariantParserRuleCall_2_1_0());
					}
					lv_variants_3_0=ruleVariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"variants",
							lv_variants_3_0,
							"org.xtext.example.mydsl.MyDsl.Variant");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleOriginal
entryRuleOriginal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOriginalRule()); }
	iv_ruleOriginal=ruleOriginal
	{ $current=$iv_ruleOriginal.current.getText(); }
	EOF;

// Rule Original
ruleOriginal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Original'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOriginalAccess().getOriginalKeyword_0());
		}
		kw='rules.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOriginalAccess().getRulesKeyword_1());
		}
		kw='Play'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOriginalAccess().getPlayKeyword_2());
		}
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOriginalAccess().getExclamationMarkKeyword_3());
		}
	)
;

// Entry rule entryRuleVariant
entryRuleVariant returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariantRule()); }
	iv_ruleVariant=ruleVariant
	{ $current=$iv_ruleVariant.current.getText(); }
	EOF;

// Rule Variant
ruleVariant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariantAccess().getChallengeParserRuleCall_0());
		}
		this_Challenge_0=ruleChallenge
		{
			$current.merge(this_Challenge_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariantAccess().getCardsEffectParserRuleCall_1());
		}
		this_CardsEffect_1=ruleCardsEffect
		{
			$current.merge(this_CardsEffect_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariantAccess().getInterceptionParserRuleCall_2());
		}
		this_Interception_2=ruleInterception
		{
			$current.merge(this_Interception_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariantAccess().getCumulatingMalusParserRuleCall_3());
		}
		this_CumulatingMalus_3=ruleCumulatingMalus
		{
			$current.merge(this_CumulatingMalus_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariantAccess().getHandsDownParserRuleCall_4());
		}
		this_HandsDown_4=ruleHandsDown
		{
			$current.merge(this_HandsDown_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariantAccess().getWithoutMalusParserRuleCall_5());
		}
		this_WithoutMalus_5=ruleWithoutMalus
		{
			$current.merge(this_WithoutMalus_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleChallenge
entryRuleChallenge returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChallengeRule()); }
	iv_ruleChallenge=ruleChallenge
	{ $current=$iv_ruleChallenge.current.getText(); }
	EOF;

// Rule Challenge
ruleChallenge returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Challenge.'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getChallengeAccess().getChallengeKeyword());
	}
;

// Entry rule entryRuleCardsEffect
entryRuleCardsEffect returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCardsEffectRule()); }
	iv_ruleCardsEffect=ruleCardsEffect
	{ $current=$iv_ruleCardsEffect.current.getText(); }
	EOF;

// Rule CardsEffect
ruleCardsEffect returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Cards'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCardsEffectAccess().getCardsKeyword_0());
		}
		(
			kw='effects:'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCardsEffectAccess().getEffectsKeyword_1());
			}
		)+
		(
			(
				kw='card'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getCardKeyword_2_0_0());
				}
				kw='0.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getDigitZeroFullStopKeyword_2_0_1());
				}
			)
			    |
			(
				kw='card'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getCardKeyword_2_1_0());
				}
				kw='7.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getDigitSevenFullStopKeyword_2_1_1());
				}
			)
			    |
			(
				kw='card'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getCardKeyword_2_2_0());
				}
				kw='0'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getDigitZeroKeyword_2_2_1());
				}
				kw='and'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getAndKeyword_2_2_2());
				}
				kw='card'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getCardKeyword_2_2_3());
				}
				kw='7.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCardsEffectAccess().getDigitSevenFullStopKeyword_2_2_4());
				}
			)
		)
	)
;

// Entry rule entryRuleInterception
entryRuleInterception returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterceptionRule()); }
	iv_ruleInterception=ruleInterception
	{ $current=$iv_ruleInterception.current.getText(); }
	EOF;

// Rule Interception
ruleInterception returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Interception.'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getInterceptionAccess().getInterceptionKeyword());
	}
;

// Entry rule entryRuleCumulatingMalus
entryRuleCumulatingMalus returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCumulatingMalusRule()); }
	iv_ruleCumulatingMalus=ruleCumulatingMalus
	{ $current=$iv_ruleCumulatingMalus.current.getText(); }
	EOF;

// Rule CumulatingMalus
ruleCumulatingMalus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Cumulating'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getCumulatingKeyword_0());
		}
		(
			kw='malus:'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getMalusKeyword_1());
			}
		)+
		(
			(
				kw='Only'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getOnlyKeyword_2_0_0());
				}
				kw='plus'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getPlusKeyword_2_0_1());
				}
				kw='2.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getDigitTwoFullStopKeyword_2_0_2());
				}
			)
			    |
			(
				kw='Only'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getOnlyKeyword_2_1_0());
				}
				kw='plus'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getPlusKeyword_2_1_1());
				}
				kw='4.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getDigitFourFullStopKeyword_2_1_2());
				}
			)
			    |
			(
				kw='plus'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getPlusKeyword_2_2_0());
				}
				kw='2'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getDigitTwoKeyword_2_2_1());
				}
				kw='and'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getAndKeyword_2_2_2());
				}
				kw='plus'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getPlusKeyword_2_2_3());
				}
				kw='4.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCumulatingMalusAccess().getDigitFourFullStopKeyword_2_2_4());
				}
			)
		)
	)
;

// Entry rule entryRuleHandsDown
entryRuleHandsDown returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHandsDownRule()); }
	iv_ruleHandsDown=ruleHandsDown
	{ $current=$iv_ruleHandsDown.current.getText(); }
	EOF;

// Rule HandsDown
ruleHandsDown returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Hands'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHandsDownAccess().getHandsKeyword_0());
		}
		kw='down.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHandsDownAccess().getDownKeyword_1());
		}
	)
;

// Entry rule entryRuleWithoutMalus
entryRuleWithoutMalus returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWithoutMalusRule()); }
	iv_ruleWithoutMalus=ruleWithoutMalus
	{ $current=$iv_ruleWithoutMalus.current.getText(); }
	EOF;

// Rule WithoutMalus
ruleWithoutMalus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Without'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWithoutMalusAccess().getWithoutKeyword_0());
		}
		kw='malus.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWithoutMalusAccess().getMalusKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
